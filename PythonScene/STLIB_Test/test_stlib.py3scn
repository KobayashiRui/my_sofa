from stlib3.scene import MainHeader
from stlib3.solver import DefaultSolver
from stlib3.physics.rigid import Cube, Sphere, Floor
from stlib3.physics.deformable import ElasticMaterialObject

def createScene(rootNode):
    #MainHeader(rootNode)

    rootNode.addObject('RequiredPlugin', name="SofaMeshCollision", printLog=False)
    rootNode.addObject('RequiredPlugin', name="SofaConstraint", printLog=False)
    rootNode.addObject('RequiredPlugin', name="SofaImplicitOdeSolver", printLog=False)

    rootNode.addObject('FreeMotionAnimationLoop', name="FreeMotionAnimationLoop")
    rootNode.addObject('DefaultPipeline', name="CollisionPipeline")
    rootNode.addObject('BruteForceBroadPhase')
    rootNode.addObject('BVHNarrowPhase')
    #rootNode.addObject('LocalMinDistance', name="Proximity", alarmDistance="0.2", contactDistance="0.09")
    rootNode.addObject('MinProximityIntersection', name="Proximity", alarmDistance="0.2",contactDistance="0.1" )
    rootNode.addObject('DefaultContactManager', name="Response",response="FrictionContact" )
    rootNode.addObject('LCPConstraintSolver', maxIt="1000", tolerance="0.001")
    
    sphere = Sphere(rootNode, name="sphere", translation=[-5.0, 0.0, 0.0])
    DefaultSolver(sphere)
    cube = Cube(rootNode, name="cube", translation=[5.0,0.0,0.0])
    DefaultSolver(cube)
    cube2 = Cube(rootNode, name="cube2", translation=[4.0,5.0,0.0])
    DefaultSolver(cube2)

    #ElasticMaterialObject(rootNode, name="dragon",
    #                      volumeMeshFileName="mesh/liver.msh",
    #                      surfaceMeshFileName="mesh/dragon.stl",
    #                      translation=[0.0,0.0,0.0])
