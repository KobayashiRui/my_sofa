import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/../'
import meshio

mesh = meshio.read(path+'sphere_cm.vtu')


def createScene(rootNode):

                rootNode.addObject('RequiredPlugin', pluginName='SoftRobots SofaOpenglVisual SofaSparseSolver SofaPreconditioner')
                rootNode.addObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe')

                rootNode.addObject('FreeMotionAnimationLoop')
                rootNode.addObject('GenericConstraintSolver', maxIterations=100, tolerance = 0.0000001)

                test_vtu = rootNode.addChild('test_vtu')
                test_vtu.addObject('EulerImplicitSolver', name='odesolver')
                test_vtu.addObject('ShewchukPCGLinearSolver', iterations=15, name='linearsolver', tolerance=1e-5, preconditioners='preconditioner', use_precond=True, update_step=1)

                test_vtu.addObject('TetrahedronSetTopologyContainer', name='topology', tetrahedra=mesh.cells_dict['tetra'].tolist())
                test_vtu.addObject('TetrahedronSetTopologyModifier')

                test_vtu.addObject('MechanicalObject', position=mesh.points.tolist())
                test_vtu.addObject('UniformMass', totalMass=0.5)
                test_vtu.addObject('TetrahedronFEMForceField', template='Vec3', name='FEM', method='large', poissonRatio=0.3,  youngModulus=18000)

                test_vtu.addObject('SparseLDLSolver', name='preconditioner')
                test_vtu.addObject('LinearSolverConstraintCorrection', solverName='preconditioner')

                cavity = test_vtu.addChild('cavity')
                cavity.addObject('MeshSTLLoader', name='loader', filename=path+'sphere_cm.stl')
                cavity.addObject('MeshTopology', src='@loader', name='topo')
                cavity.addObject('MechanicalObject', name='cavity')
                cavity.addObject('SurfacePressureConstraint', triangles='@topo.triangles', value=40, valueType=1)
                cavity.addObject('BarycentricMapping', name='mapping',  mapForces=False, mapMasses=False)
                return rootNode