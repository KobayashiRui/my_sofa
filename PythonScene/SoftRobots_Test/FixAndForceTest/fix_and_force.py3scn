import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/../'
import meshio

#mesh = meshio.read(path+'diamond.vtu')
#mesh = meshio.read(path+'hex.vtu')
mesh = meshio.read(path+'rectangle.vtu')


def createScene(rootNode):

                rootNode.addObject('RequiredPlugin', pluginName='SoftRobots SofaOpenglVisual SofaSparseSolver SofaPreconditioner')
                rootNode.addObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe')

                rootNode.addObject('FreeMotionAnimationLoop')
                rootNode.addObject('GenericConstraintSolver', maxIterations=100, tolerance = 0.0000001)

                test_vtu = rootNode.addChild('test_vtu')
                test_vtu.addObject('EulerImplicitSolver', name='odesolver')
                test_vtu.addObject('ShewchukPCGLinearSolver', iterations=15, name='linearsolver', tolerance=1e-5, preconditioners='preconditioner', use_precond=True, update_step=1)

                test_vtu.addObject('TetrahedronSetTopologyContainer', name='container', tetrahedra=mesh.cells_dict['tetra'].tolist())
                test_vtu.addObject('TetrahedronSetTopologyModifier')

                test_vtu.addObject('MechanicalObject', name='tetras', position=mesh.points.tolist())
                test_vtu.addObject('UniformMass', totalMass=0.5)
                #test_vtu.addObject('TetrahedronFEMForceField', template='Vec3', name='FEM', method='large', poissonRatio=0.3,  youngModulus=18000)
                #test_vtu.addObject('TetrahedronFEMForceField', template='Vec3', name='FEM', method='large', poissonRatio=0.2,  youngModulus=10000) //100MPa 0.1GPa
                test_vtu.addObject('TetrahedronFEMForceField', template='Vec3', name='FEM', method='large', poissonRatio=0.48,  youngModulus=2000)


                test_vtu.addObject('BoxROI', name='boxROI', box=[-3, -1, -0.5,  -0.5, 4, 0.5], drawBoxes=True, position="@tetras.rest_position", tetrahedra="@container.tetrahedra")
                test_vtu.addObject('RestShapeSpringsForceField', points='@boxROI.indices', stiffness=1e12)

                #diamond force BOX
                #test_vtu.addObject('BoxROI', name='boxROI2', template="Vec3d", box=[3.8, 1.5, 0,  4.3, 2.5, 0.5], drawBoxes=True, position="@tetras.rest_position", tetrahedra="@container.tetrahedra")
                #hex & rectangle force box
                test_vtu.addObject('BoxROI', name='boxROI2', template="Vec3d", box=[3.8, 1.2, 0,  4.3, 2.2, 0.5], drawBoxes=True, position="@tetras.rest_position", tetrahedra="@container.tetrahedra")

                test_vtu.addObject('ConstantForceField', indices='@boxROI2.indices', totalForce =[[0.0,-1.0,0.0]], showArrowSize = "3.0")

                test_vtu.addObject('SparseLDLSolver', name='preconditioner')
                test_vtu.addObject('LinearSolverConstraintCorrection', solverName='preconditioner')


                test_vtuVisu = test_vtu.addChild('visu')
                test_vtuVisu.addObject('TriangleSetTopologyContainer', name='container')
                test_vtuVisu.addObject('TriangleSetTopologyModifier')
                test_vtuVisu.addObject('Tetra2TriangleTopologicalMapping', name='Mapping', input="@../container", output="@container")

                test_vtuVisu.addObject('OglModel', color=[0.3, 0.2, 0.2, 0.6])
                test_vtuVisu.addObject('IdentityMapping')
                return rootNode